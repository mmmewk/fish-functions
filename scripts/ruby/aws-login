#!/usr/bin/env ruby

require 'rubygems'
require 'json'
require 'open-uri'
require 'cgi'
require 'aws-sdk-core'
require 'shellwords'

# Create a new STS instance
#
# Note: Calls to AWS STS API operations must be signed using an access key ID
# and secret access key. The credentials can be in EC2 instance metadata
# or in environment variables and will be automatically discovered by
# the default credentials provider in the AWS Ruby SDK.
sts = Aws::STS::Client.new

identity = sts.get_caller_identity

policy = {
  Version: '2012-10-17',
  Statement: [
    {
      Effect: 'Allow',
      Action: '*',
      Resource: '*'
    }
  ]
}.to_json

# The following call creates a temporary session that returns
# temporary security credentials and a session token.
# The policy grants permissions to work
# in the AWS SNS console.
session = sts.get_federation_token(
  {
    duration_seconds: 129_600,
    name: identity[:arn].split('/').last,
    policy: policy
  }
)

# The issuer value is the URL where users are directed (such as
# to your internal sign-in page) when their session expires.
#
# The console value specifies the URL to the destination console.
# This example goes to the Amazon SNS console.
#
# The sign-in value is the URL of the AWS STS federation endpoint.
issuer = 'aws-login'
service = ARGV.shift
region_index = ARGV.find_index('-r') || ARGV.find_index('-region')
region = ARGV[region_index + 1] if region_index
console_url = 'https://console.aws.amazon.com/'
console_url += "#{service}/home" if service
console_url += "?region=#{region}" if region
signin_url = 'https://signin.aws.amazon.com/federation'

# Create a block of JSON that contains the temporary credentials
# (including the access key ID, secret access key, and session token).
session_json = {
  sessionId: session.credentials[:access_key_id],
  sessionKey: session.credentials[:secret_access_key],
  sessionToken: session.credentials[:session_token]
}.to_json

# Call the federation endpoint, passing the parameters
# created earlier and the session information as a JSON block. 
# The request returns a sign-in token that's valid for 15 minutes.
# Signing in to the console with the token creates a session 
# that is valid for 12 hours.
get_signin_token_url = "#{signin_url}?Action=getSigninToken&SessionType=json&Session=#{CGI.escape(session_json)}"

returned_content = URI.parse(get_signin_token_url).read

# Extract the sign-in token from the information returned
# by the federation endpoint.
signin_token = JSON.parse(returned_content)['SigninToken']
signin_token_param = '&SigninToken=' + CGI.escape(signin_token)

# Create the URL to give to the user, which includes the
# sign-in token and the URL of the console to open.
# The "issuer" parameter is optional but recommended.
issuer_param = "&Issuer=#{CGI.escape(issuer)}"
destination_param = "&Destination=#{CGI.escape(console_url)}"
login_url = "#{signin_url}?Action=login#{signin_token_param}#{issuer_param}#{destination_param}"

`open #{login_url.shellescape}`
